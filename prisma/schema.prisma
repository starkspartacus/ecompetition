generator client {
  provider = "prisma-client-js"
  // Désactiver la prise en charge des transactions
  previewFeatures = []
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ORGANIZER
  PARTICIPANT
  ADMIN
}

enum CompetitionCategory {
  FOOTBALL
  BASKETBALL
  VOLLEYBALL
  HANDBALL
  TENNIS
  MARACANA
  OTHER
}

enum CompetitionStatus {
  DRAFT
  OPEN
  CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ParticipationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TournamentFormat {
  ROUND_ROBIN
  GROUPS
  KNOCKOUT
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  SWISS_SYSTEM
}

enum TournamentPhase {
  GROUP_STAGE
  ROUND_OF_16
  QUARTER_FINALS
  SEMI_FINALS
  FINALS
}

enum AuthMethod {
  EMAIL
  PHONE
  GOOGLE
}

enum OffsideRule {
  ENABLED
  DISABLED
}

enum SubstitutionRule {
  LIMITED
  UNLIMITED
  FLYING
}

enum YellowCardRule {
  STANDARD
  STRICT
  LENIENT
}

enum MatchDuration {
  SHORT
  STANDARD
  EXTENDED
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  email              String?              @unique
  password           String?
  phoneNumber        String?              @unique
  phoneCountryCode   String?
  countryCode        String
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  city               String
  commune            String?
  address            String
  photoUrl           String?
  role               UserRole
  preferredAuthMethod AuthMethod          @default(EMAIL)
  competitionCategory CompetitionCategory?
  bio                String?
  socialLinks        Json?
  lastLogin          DateTime?
  isVerified         Boolean              @default(false)
  verificationToken  String?
  resetToken         String?
  resetTokenExpiry   DateTime?

  // Relations
  organizerCompetitions Competition[]     @relation("OrganizedCompetitions")
  participantTeams      Team[]            @relation("TeamParticipant")
  participations        Participation[]   @relation("ParticipantRequests")
  notifications         Notification[]
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  accounts              Account[]
  sessions              Session[]

  @@unique([email, countryCode])
  @@unique([phoneNumber, phoneCountryCode, countryCode])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Competition {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  address             String
  venue               String
  maxParticipants     Int
  imageUrl            String?
  bannerUrl           String?
  category            CompetitionCategory
  registrationStartDate DateTime
  registrationDeadline DateTime
  startDate           DateTime?
  endDate             DateTime?
  description         String?
  rules               String?
  prizes              Json?
  uniqueCode          String             @unique
  status              CompetitionStatus  @default(OPEN)
  tournamentFormat    TournamentFormat?
  isPublic            Boolean            @default(true)
  
  // Règles de compétition
  offsideRule         OffsideRule?
  substitutionRule    SubstitutionRule?
  yellowCardRule      YellowCardRule?
  matchDuration       MatchDuration?
  customRules         Json?
  
  // Relations
  organizerId         String             @db.ObjectId
  organizer           User               @relation("OrganizedCompetitions", fields: [organizerId], references: [id])
  teams               Team[]             @relation("CompetitionTeams")
  participations      Participation[]
  matches             Match[]
  groups              Group[]
  
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Team {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  logoUrl       String?
  colors        String?
  description   String?
  
  // Relations
  competitionId String    @db.ObjectId
  competition   Competition @relation("CompetitionTeams", fields: [competitionId], references: [id])
  ownerId       String    @db.ObjectId
  owner         User      @relation("TeamParticipant", fields: [ownerId], references: [id])
  players       Player[]
  homeMatches   Match[]   @relation("HomeTeam")
  awayMatches   Match[]   @relation("AwayTeam")
  groupId       String?   @db.ObjectId
  group         Group?    @relation(fields: [groupId], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Player {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  age         Int
  position    String?
  number      Int?
  photoUrl    String?
  stats       Json?
  
  // Relations
  teamId      String   @db.ObjectId
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Participation {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  status        ParticipationStatus @default(PENDING)
  message       String?
  responseMessage String?
  
  // Relations
  competitionId String             @db.ObjectId
  competition   Competition        @relation(fields: [competitionId], references: [id])
  participantId String             @db.ObjectId
  participant   User               @relation("ParticipantRequests", fields: [participantId], references: [id])
  
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  @@unique([competitionId, participantId])
}

model Match {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  phase         TournamentPhase
  matchNumber   Int
  homeScore     Int?
  awayScore     Int?
  played        Boolean         @default(false)
  scheduledDate DateTime?
  location      String?
  highlights    String?
  stats         Json?
  
  // Relations
  competitionId String          @db.ObjectId
  competition   Competition     @relation(fields: [competitionId], references: [id])
  homeTeamId    String          @db.ObjectId
  homeTeam      Team            @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeamId    String          @db.ObjectId
  awayTeam      Team            @relation("AwayTeam", fields: [awayTeamId], references: [id])
  groupId       String?         @db.ObjectId
  group         Group?          @relation(fields: [groupId], references: [id])
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Group {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  
  // Relations
  competitionId String       @db.ObjectId
  competition   Competition  @relation(fields: [competitionId], references: [id])
  teams         Team[]
  matches       Match[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  title       String
  message     String
  isRead      Boolean  @default(false)
  link        String?
  
  // Relations
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
}


