generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(uuid())
  email                 String               @unique
  password              String?
  phoneNumber           String?              @unique
  firstName             String
  lastName              String
  dateOfBirth           DateTime
  country               String
  city                  String
  commune               String?
  address               String
  photoUrl              String?
  role                  UserRole
  competitionCategory   CompetitionCategory?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  accounts              Account[]
  organizerCompetitions Competition[]        @relation("OrganizedCompetitions")
  participations        Participation[]      @relation("ParticipantRequests")
  sessions              Session[]
  participantTeams      Team[]               @relation("TeamParticipant")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@unique([identifier, token])
}

model Competition {
  id                   String              @id @default(uuid())
  title                String
  address              String
  venue                String
  maxParticipants      Int
  imageUrl             String?
  category             CompetitionCategory
  registrationDeadline DateTime
  uniqueCode           String              @unique
  status               CompetitionStatus   @default(OPEN)
  tournamentFormat     TournamentFormat?
  organizerId          String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  organizer            User                @relation("OrganizedCompetitions", fields: [organizerId], references: [id])
  groups               Group[]
  matches              Match[]
  participations       Participation[]
  teams                Team[]              @relation("CompetitionTeams")
}

model Team {
  id            String      @id @default(uuid())
  name          String
  competitionId String
  ownerId       String
  groupId       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  awayMatches   Match[]     @relation("AwayTeam")
  homeMatches   Match[]     @relation("HomeTeam")
  players       Player[]
  competition   Competition @relation("CompetitionTeams", fields: [competitionId], references: [id])
  group         Group?      @relation(fields: [groupId], references: [id])
  owner         User        @relation("TeamParticipant", fields: [ownerId], references: [id])
}

model Player {
  id        String   @id @default(uuid())
  name      String
  age       Int
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Participation {
  id            String              @id @default(uuid())
  status        ParticipationStatus @default(PENDING)
  competitionId String
  participantId String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  competition   Competition         @relation(fields: [competitionId], references: [id])
  participant   User                @relation("ParticipantRequests", fields: [participantId], references: [id])

  @@unique([competitionId, participantId])
}

model Match {
  id            String          @id @default(uuid())
  phase         TournamentPhase
  matchNumber   Int
  homeScore     Int?
  awayScore     Int?
  played        Boolean         @default(false)
  scheduledDate DateTime?
  competitionId String
  homeTeamId    String
  awayTeamId    String
  groupId       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  awayTeam      Team            @relation("AwayTeam", fields: [awayTeamId], references: [id])
  competition   Competition     @relation(fields: [competitionId], references: [id])
  group         Group?          @relation(fields: [groupId], references: [id])
  homeTeam      Team            @relation("HomeTeam", fields: [homeTeamId], references: [id])
}

model Group {
  id            String      @id @default(uuid())
  name          String
  competitionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  competition   Competition @relation(fields: [competitionId], references: [id])
  matches       Match[]
  teams         Team[]
}

enum UserRole {
  ORGANIZER
  PARTICIPANT
}

enum CompetitionCategory {
  FOOTBALL
  BASKETBALL
  VOLLEYBALL
  HANDBALL
  TENNIS
  MARACANA
  OTHER
}

enum CompetitionStatus {
  OPEN
  CLOSED
  IN_PROGRESS
  COMPLETED
}

enum ParticipationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TournamentFormat {
  ROUND_ROBIN
  GROUPS
  KNOCKOUT
}

enum TournamentPhase {
  GROUP_STAGE
  ROUND_OF_16
  QUARTER_FINALS
  SEMI_FINALS
  FINALS
}
