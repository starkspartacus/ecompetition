/**
 * Service de comp√©tition qui utilise MongoDB natif tout en respectant le sch√©ma Prisma
 */
import {
  validateCompetition,
  CompetitionStatus,
  CompetitionCategory,
  TournamentFormat,
  OffsideRule,
  SubstitutionRule,
  YellowCardRule,
  MatchDuration,
  type Competition,
} from "./prisma-schema";
import { generateUniqueCode } from "./utils";
import {
  connectDB,
  insertOne,
  findOne,
  find,
  updateOne,
  deleteOne,
  count,
} from "./mongodb-client";

// Collection pour les comp√©titions
const COLLECTION_NAME = "Competition";

/**
 * Cr√©e une nouvelle comp√©tition
 */
export async function createCompetition(
  competitionData: any
): Promise<Competition> {
  try {
    // S'assurer que la connexion √† la base de donn√©es est √©tablie
    await connectDB();

    // G√©n√©rer un code unique
    const uniqueCode = generateUniqueCode();

    // Pr√©parer les donn√©es de la comp√©tition
    const competition = {
      ...competitionData,
      uniqueCode,
      status: competitionData.status || CompetitionStatus.DRAFT,
      isPublic:
        competitionData.isPublic !== undefined
          ? competitionData.isPublic
          : true,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // Valider les donn√©es selon le sch√©ma Prisma
    const validatedCompetition = validateCompetition(competition);

    // Cr√©er la comp√©tition dans la base de donn√©es
    const createdCompetition = await insertOne(
      COLLECTION_NAME,
      validatedCompetition
    );

    console.log(`‚úÖ Comp√©tition cr√©√©e avec succ√®s: ${createdCompetition.id}`);
    return createdCompetition as Competition;
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de la comp√©tition:", error);
    throw error;
  }
}

/**
 * R√©cup√®re une comp√©tition par son ID
 */
export async function getCompetitionById(
  id: string
): Promise<Competition | null> {
  try {
    await connectDB();
    const competition = await findOne(COLLECTION_NAME, { _id: id });
    return competition as Competition | null;
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la r√©cup√©ration de la comp√©tition:",
      error
    );
    throw error;
  }
}

/**
 * R√©cup√®re une comp√©tition par son code unique
 */
export async function getCompetitionByUniqueCode(
  uniqueCode: string
): Promise<Competition | null> {
  try {
    await connectDB();
    const competitions = await find(COLLECTION_NAME, { uniqueCode });
    return competitions.length > 0 ? (competitions[0] as Competition) : null;
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la r√©cup√©ration de la comp√©tition par code unique:",
      error
    );
    throw error;
  }
}

/**
 * R√©cup√®re les comp√©titions d'un organisateur
 */
export async function getCompetitionsByOrganizerId(
  organizerId: string
): Promise<Competition[]> {
  try {
    await connectDB();
    console.log(
      `üîç Recherche des comp√©titions pour l'organisateur: ${organizerId}`
    );

    // V√©rifier si l'ID est valide
    if (!organizerId || typeof organizerId !== "string") {
      console.error(`‚ùå ID d'organisateur invalide: ${organizerId}`);
      return [];
    }

    // Utiliser la fonction find du client MongoDB avec l'ID sous forme de cha√Æne
    // Le client MongoDB se chargera de la conversion en ObjectId
    const competitions = await find(
      COLLECTION_NAME,
      { organizerId },
      { sort: { createdAt: -1 } }
    );

    console.log(
      `‚úÖ ${competitions.length} comp√©titions trouv√©es pour l'organisateur ${organizerId}`
    );

    if (competitions.length === 0) {
      // Essayer une recherche alternative si aucun r√©sultat n'est trouv√©
      console.log(
        `üîç Tentative de recherche alternative pour l'organisateur: ${organizerId}`
      );
      const altCompetitions = await find(
        COLLECTION_NAME,
        {},
        { sort: { createdAt: -1 } }
      );

      // Filtrer manuellement les comp√©titions
      const filteredCompetitions = altCompetitions.filter(
        (comp: Competition) => {
          const compOrgId = comp.organizerId?.toString() || "";
          return compOrgId === organizerId;
        }
      );

      console.log(
        `‚úÖ Recherche alternative: ${filteredCompetitions.length} comp√©titions trouv√©es`
      );

      if (filteredCompetitions.length > 0) {
        return filteredCompetitions as Competition[];
      }
    }

    return competitions as Competition[];
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la r√©cup√©ration des comp√©titions de l'organisateur:",
      error
    );
    throw error;
  }
}

/**
 * R√©cup√®re toutes les comp√©titions avec filtres optionnels
 */
export async function getAllCompetitions(
  filters: any = {},
  options: any = {}
): Promise<Competition[]> {
  try {
    await connectDB();
    const competitions = await find(COLLECTION_NAME, filters, options);
    return competitions as Competition[];
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des comp√©titions:", error);
    throw error;
  }
}

/**
 * Met √† jour une comp√©tition
 */
export async function updateCompetition(
  id: string,
  competitionData: any
): Promise<Competition> {
  try {
    await connectDB();

    // R√©cup√©rer la comp√©tition existante
    const existingCompetition = await getCompetitionById(id);

    if (!existingCompetition) {
      throw new Error("Comp√©tition non trouv√©e");
    }

    // Fusionner les donn√©es existantes avec les nouvelles donn√©es
    const updatedCompetition = {
      ...existingCompetition,
      ...competitionData,
      updatedAt: new Date(),
    };

    // Valider les donn√©es selon le sch√©ma Prisma
    const validatedCompetition = validateCompetition(updatedCompetition);

    // Mettre √† jour la comp√©tition dans la base de donn√©es
    const result = await updateOne(
      COLLECTION_NAME,
      { _id: id },
      validatedCompetition
    );

    console.log(`‚úÖ Comp√©tition mise √† jour avec succ√®s: ${id}`);
    return result as Competition;
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour de la comp√©tition:", error);
    throw error;
  }
}

/**
 * Met √† jour le statut d'une comp√©tition
 */
export async function updateCompetitionStatus(
  id: string,
  status: CompetitionStatus
): Promise<Competition> {
  try {
    const updatedCompetition = await updateCompetition(id, { status });
    console.log(`‚úÖ Statut de la comp√©tition ${id} mis √† jour: ${status}`);
    return updatedCompetition;
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour du statut:", error);
    throw error;
  }
}

/**
 * R√©cup√®re les comp√©titions qui n√©cessitent une mise √† jour de statut
 */
export async function getCompetitionsForStatusUpdate(): Promise<Competition[]> {
  try {
    await connectDB();
    const now = new Date();

    // R√©cup√©rer toutes les comp√©titions qui ne sont pas termin√©es ou annul√©es
    const competitions = await find(COLLECTION_NAME, {
      status: {
        $nin: [CompetitionStatus.COMPLETED, CompetitionStatus.CANCELLED],
      },
    });

    return competitions as Competition[];
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la r√©cup√©ration des comp√©titions pour mise √† jour:",
      error
    );
    throw error;
  }
}

/**
 * Supprime une comp√©tition
 */
export async function deleteCompetition(id: string): Promise<{ id: string }> {
  try {
    await connectDB();
    const result = await deleteOne(COLLECTION_NAME, { _id: id });
    console.log(`‚úÖ Comp√©tition supprim√©e avec succ√®s: ${id}`);
    return result;
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de la comp√©tition:", error);
    throw error;
  }
}

/**
 * Compte le nombre de comp√©titions avec filtres optionnels
 */
export async function countCompetitions(filters: any = {}): Promise<number> {
  try {
    await connectDB();
    return await count(COLLECTION_NAME, filters);
  } catch (error) {
    console.error("‚ùå Erreur lors du comptage des comp√©titions:", error);
    throw error;
  }
}

/**
 * R√©cup√®re toutes les cat√©gories de comp√©tition
 */
export function getAllCompetitionCategories(): string[] {
  return Object.values(CompetitionCategory);
}

/**
 * R√©cup√®re tous les formats de tournoi
 */
export function getAllTournamentFormats(): string[] {
  return Object.values(TournamentFormat);
}

/**
 * R√©cup√®re toutes les r√®gles de hors-jeu
 */
export function getAllOffsideRules(): string[] {
  return Object.values(OffsideRule);
}

/**
 * R√©cup√®re toutes les r√®gles de substitution
 */
export function getAllSubstitutionRules(): string[] {
  return Object.values(SubstitutionRule);
}

/**
 * R√©cup√®re toutes les r√®gles de carton jaune
 */
export function getAllYellowCardRules(): string[] {
  return Object.values(YellowCardRule);
}

/**
 * R√©cup√®re toutes les dur√©es de match
 */
export function getAllMatchDurations(): string[] {
  return Object.values(MatchDuration);
}
