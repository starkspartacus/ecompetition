const { Server } = require("socket.io");

let io = null;

function initializeSocketServer(server) {
  io = new Server(server, {
    cors: {
      origin: process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000",
      methods: ["GET", "POST"],
      credentials: true,
    },
  });

  io.on("connection", (socket) => {
    console.log(`üîå Client connect√©: ${socket.id}`);

    // Authentification de l'utilisateur
    socket.on("authenticate", (data) => {
      const { userId, role } = data;
      if (!userId) {
        socket.emit("authenticated", {
          success: false,
          error: "ID utilisateur manquant",
        });
        return;
      }

      // Stocker les informations de l'utilisateur dans l'objet socket
      socket.data.userId = userId;
      socket.data.role = role || "PARTICIPANT";

      // Rejoindre la room sp√©cifique √† l'utilisateur
      socket.join(`user-${userId}`);
      console.log(
        `üë§ Utilisateur ${userId} (${role}) authentifi√© et a rejoint la room user-${userId}`
      );

      // Si c'est un organisateur, le faire rejoindre la room des organisateurs
      if (role === "ORGANIZER") {
        socket.join("organizers");
        socket.join(`organizer-${userId}`);
        console.log(
          `üëë Organisateur ${userId} a rejoint la room des organisateurs`
        );
      }

      socket.emit("authenticated", { success: true, userId });
    });

    // Rejoindre une room de comp√©tition
    socket.on("join-competition", (competitionId) => {
      if (!competitionId) return;
      socket.join(`competition-${competitionId}`);
      console.log(
        `üèÜ Client ${socket.id} a rejoint la room de la comp√©tition ${competitionId}`
      );
    });

    // Rejoindre une room d'organisateur
    socket.on("join-organizer", (organizerId) => {
      if (!organizerId) return;
      socket.join(`organizer-${organizerId}`);
      console.log(
        `üëë Client ${socket.id} a rejoint la room de l'organisateur ${organizerId}`
      );
    });

    // Rejoindre une room g√©n√©rique
    socket.on("join-room", (room) => {
      if (!room) return;
      socket.join(room);
      console.log(`üö™ Client ${socket.id} a rejoint la room ${room}`);
    });

    // Ping pour maintenir la connexion active
    socket.on("ping", () => {
      socket.emit("pong", { timestamp: new Date() });
    });

    // D√©connexion
    socket.on("disconnect", (reason) => {
      console.log(`üîå Client d√©connect√©: ${socket.id}, raison: ${reason}`);
    });
  });

  console.log("üöÄ Serveur Socket.IO initialis√©");
  return io;
}

function getSocketIO() {
  if (!io) {
    console.warn(
      "‚ö†Ô∏è Socket.IO n'est pas initialis√©. Utilisez initializeSocketServer d'abord."
    );
    return null;
  }
  return io;
}

// Fonction pour envoyer une notification √† un utilisateur sp√©cifique
function sendNotificationToUser(userId, notification) {
  if (!io) {
    console.warn(
      "‚ö†Ô∏è Socket.IO n'est pas initialis√©. Impossible d'envoyer la notification."
    );
    return false;
  }

  try {
    // Envoyer √† la room sp√©cifique de l'utilisateur
    io.to(`user-${userId}`).emit("notification", notification);

    // Si c'est une notification de participation, envoyer aussi comme √©v√©nement sp√©cifique
    if (
      notification.type === "PARTICIPATION_REQUEST" ||
      (notification.data && notification.data.type === "PARTICIPATION_REQUEST")
    ) {
      io.to(`user-${userId}`).emit("new-participation-request", {
        participationId: notification.data?.participationId,
        competitionId: notification.data?.competitionId,
        competitionTitle: notification.data?.competitionName,
        participantId: notification.data?.participantId,
        participantName: notification.data?.participantName,
        timestamp: new Date(),
        ...notification.data,
      });
    }

    console.log(
      `üì® Notification envoy√©e √† l'utilisateur ${userId}:`,
      notification.title
    );
    return true;
  } catch (error) {
    console.error(
      `‚ùå Erreur lors de l'envoi de la notification √† l'utilisateur ${userId}:`,
      error
    );
    return false;
  }
}

// Fonction pour envoyer une notification √† tous les organisateurs
function sendNotificationToOrganizers(notification) {
  if (!io) {
    console.warn(
      "‚ö†Ô∏è Socket.IO n'est pas initialis√©. Impossible d'envoyer la notification."
    );
    return false;
  }

  try {
    io.to("organizers").emit("notification", notification);
    console.log(
      "üì® Notification envoy√©e √† tous les organisateurs:",
      notification.title
    );
    return true;
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de l'envoi de la notification aux organisateurs:",
      error
    );
    return false;
  }
}

// Fonction pour envoyer une notification √† tous les participants d'une comp√©tition
function sendNotificationToCompetition(competitionId, notification) {
  if (!io) {
    console.warn(
      "‚ö†Ô∏è Socket.IO n'est pas initialis√©. Impossible d'envoyer la notification."
    );
    return false;
  }

  try {
    io.to(`competition-${competitionId}`).emit("notification", notification);
    console.log(
      `üì® Notification envoy√©e √† la comp√©tition ${competitionId}:`,
      notification.title
    );
    return true;
  } catch (error) {
    console.error(
      `‚ùå Erreur lors de l'envoi de la notification √† la comp√©tition ${competitionId}:`,
      error
    );
    return false;
  }
}

// Fonction pour envoyer une mise √† jour de statut √† tous les participants d'une comp√©tition
function sendStatusUpdateToCompetition(competitionId, update) {
  if (!io) {
    console.warn(
      "‚ö†Ô∏è Socket.IO n'est pas initialis√©. Impossible d'envoyer la mise √† jour."
    );
    return false;
  }

  try {
    io.to(`competition-${competitionId}`).emit("status-updated", update);
    console.log(
      `üìä Mise √† jour de statut envoy√©e √† la comp√©tition ${competitionId}:`,
      update.newStatus
    );
    return true;
  } catch (error) {
    console.error(
      `‚ùå Erreur lors de l'envoi de la mise √† jour √† la comp√©tition ${competitionId}:`,
      error
    );
    return false;
  }
}

module.exports = {
  initializeSocketServer,
  getSocketIO,
  sendNotificationToUser,
  sendNotificationToOrganizers,
  sendNotificationToCompetition,
  sendStatusUpdateToCompetition,
};
