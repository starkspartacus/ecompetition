import { type NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { db } from "@/lib/database-service";
import { ObjectId } from "mongodb";

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session || session.user.role !== "PARTICIPANT") {
      return NextResponse.json(
        {
          error:
            "Non autoris√©. Seuls les participants peuvent cr√©er des √©quipes.",
        },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { name, competitionId, description, logoUrl, colors } = body;

    console.log(
      "üèÜ Cr√©ation d'une nouvelle √©quipe:",
      name,
      "pour la comp√©tition:",
      competitionId
    );

    if (!name || !competitionId) {
      return NextResponse.json(
        { error: "Le nom de l'√©quipe et l'ID de la comp√©tition sont requis" },
        { status: 400 }
      );
    }

    // V√©rifier que la comp√©tition existe
    const competition = await db.competitions.findById(competitionId);

    if (!competition) {
      return NextResponse.json(
        { error: "Comp√©tition non trouv√©e" },
        { status: 404 }
      );
    }

    // V√©rifier que l'utilisateur participe √† cette comp√©tition
    const participations = await db.participations.findByCompetition(
      competitionId
    );
    const userParticipation = participations.find(
      (p) =>
        p.participantId.toString() === session.user.id &&
        p.status === ("APPROVED" as any)
    );

    if (!userParticipation) {
      return NextResponse.json(
        {
          error:
            "Vous devez √™tre accept√© dans cette comp√©tition pour cr√©er une √©quipe",
        },
        { status: 403 }
      );
    }

    // V√©rifier que l'utilisateur n'a pas d√©j√† une √©quipe dans cette comp√©tition
    const existingTeams = await db.teams.findByCompetition(competitionId);
    const userTeam = existingTeams.find(
      (team) => team.captainId.toString() === session.user.id
    );

    if (userTeam) {
      return NextResponse.json(
        { error: "Vous avez d√©j√† une √©quipe dans cette comp√©tition" },
        { status: 400 }
      );
    }

    // V√©rifier que le nom de l'√©quipe n'est pas d√©j√† pris dans cette comp√©tition
    const nameExists = existingTeams.find(
      (team) => team.name.toLowerCase() === name.toLowerCase()
    );

    if (nameExists) {
      return NextResponse.json(
        { error: "Ce nom d'√©quipe est d√©j√† pris dans cette comp√©tition" },
        { status: 400 }
      );
    }

    // Cr√©er l'√©quipe avec les bons types
    const team = await db.teams.create({
      name,
      competitionId: new ObjectId(competitionId),
      captainId: new ObjectId(session.user.id),
      description: description || "",
      logo: logoUrl || undefined,
      isActive: true,
    });

    console.log("‚úÖ √âquipe cr√©√©e avec succ√®s:", team?.id);

    return NextResponse.json({
      success: true,
      team: {
        id: team?.id,
        name: team?.name,
        description: team?.description,
        logo: team?.logo,
        colors: colors || "#3B82F6",
        competitionId: competitionId,
        captainId: session.user.id,
        isActive: team?.isActive,
        createdAt: team?.createdAt,
        updatedAt: team?.updatedAt,
      },
      message: "√âquipe cr√©√©e avec succ√®s",
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de l'√©quipe:", error);
    return NextResponse.json(
      { error: "Erreur lors de la cr√©ation de l'√©quipe" },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session) {
      return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
    }

    const searchParams = request.nextUrl.searchParams;
    const competitionId = searchParams.get("competitionId");

    let teams: any[];

    if (competitionId) {
      // R√©cup√©rer les √©quipes d'une comp√©tition sp√©cifique
      teams = await db.teams.findByCompetition(competitionId);
    } else if (session.user.role === "PARTICIPANT") {
      // R√©cup√©rer les √©quipes du participant connect√©
      teams = await db.teams.findByCaptain(session.user.id);
    } else {
      // Pour les admins/organisateurs, r√©cup√©rer toutes les √©quipes
      const allTeams = await db.teams.findMany({});
      teams = allTeams;
    }

    // Enrichir les donn√©es des √©quipes avec les informations suppl√©mentaires
    const enrichedTeams = await Promise.all(
      teams.map(async (team: any) => {
        try {
          // R√©cup√©rer les joueurs de l'√©quipe
          const players = await db.players.findByTeam(team.id);

          // R√©cup√©rer les informations de la comp√©tition
          const competition = await db.competitions.findById(
            team.competitionId.toString()
          );

          // R√©cup√©rer les informations du capitaine
          const captain = await db.users.findById(team.captainId.toString());

          return {
            id: team.id,
            name: team.name,
            description: team.description || "",
            logo: team.logo,
            colors: "#3B82F6", // Valeur par d√©faut
            competitionId: team.competitionId.toString(),
            competitionName: competition?.name || "Comp√©tition inconnue",
            captainId: team.captainId.toString(),
            captainName: captain
              ? `${captain.firstName || ""} ${captain.lastName || ""}`.trim()
              : "Capitaine",
            playersCount: players.length,
            players: players.map((player: any) => ({
              id: player.id,
              name: player.name,
              age: player.age,
              position: player.position || "",
              jerseyNumber: player.jerseyNumber || null,
              photoUrl: player.photoUrl || null,
            })),
            isActive: team.isActive,
            createdAt: team.createdAt,
            updatedAt: team.updatedAt,
          };
        } catch (error) {
          console.error(
            "‚ùå Erreur lors de l'enrichissement de l'√©quipe:",
            team.id,
            error
          );
          return {
            id: team.id,
            name: team.name,
            description: team.description || "",
            logo: team.logo,
            colors: "#3B82F6",
            competitionId: team.competitionId.toString(),
            competitionName: "Comp√©tition inconnue",
            captainId: team.captainId.toString(),
            captainName: "Capitaine",
            playersCount: 0,
            players: [],
            isActive: team.isActive,
            createdAt: team.createdAt,
            updatedAt: team.updatedAt,
          };
        }
      })
    );

    return NextResponse.json({
      teams: enrichedTeams,
      total: enrichedTeams.length,
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©quipes:", error);
    return NextResponse.json(
      { error: "Erreur lors de la r√©cup√©ration des √©quipes" },
      { status: 500 }
    );
  }
}
