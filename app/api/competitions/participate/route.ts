import { type NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { db } from "@/lib/database-service";
import { ObjectId } from "mongodb";

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session || session.user.role !== "PARTICIPANT") {
      return NextResponse.json(
        {
          error:
            "Non autoris√©. Seuls les participants peuvent demander √† participer.",
        },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { competitionId, uniqueCode, message } = body;

    console.log("üéØ Demande de participation:", {
      competitionId,
      uniqueCode,
      userId: session.user.id,
    });

    // V√©rifier que l'utilisateur a un ID
    if (!session.user.id) {
      return NextResponse.json(
        { error: "ID utilisateur manquant" },
        { status: 400 }
      );
    }

    // Rechercher la comp√©tition avec m√©thodes robustes
    let competition: any = null;

    try {
      if (competitionId) {
        console.log("üîç Recherche par ID:", competitionId);
        if (ObjectId.isValid(competitionId)) {
          competition = await db.competitions.findById(competitionId);
        }
      } else if (uniqueCode) {
        console.log("üîç Recherche par code:", uniqueCode);

        // 1. Recherche exacte par nom
        const exactMatches = await db.competitions.findMany({
          name: uniqueCode,
        });
        if (exactMatches && exactMatches.length > 0) {
          competition = exactMatches[0];
          console.log("‚úÖ Trouv√© par nom exact");
        }

        // 2. Recherche partielle par nom si pas trouv√©
        if (!competition) {
          const partialMatches = await db.competitions.findMany({});
          const filtered = partialMatches?.filter((c: any) =>
            c.name?.toLowerCase().includes(uniqueCode.toLowerCase())
          );
          if (filtered && filtered.length > 0) {
            competition = filtered[0];
            console.log("‚úÖ Trouv√© par nom partiel");
          }
        }

        // 3. Recherche dans la description si toujours pas trouv√©
        if (!competition) {
          const allCompetitions = await db.competitions.findMany({});
          const descriptionMatches = allCompetitions?.filter((c: any) =>
            c.description?.toLowerCase().includes(uniqueCode.toLowerCase())
          );
          if (descriptionMatches && descriptionMatches.length > 0) {
            competition = descriptionMatches[0];
            console.log("‚úÖ Trouv√© par description");
          }
        }
      }
    } catch (searchError) {
      console.error("‚ùå Erreur lors de la recherche:", searchError);
    }

    if (!competition) {
      return NextResponse.json(
        { error: "Comp√©tition non trouv√©e" },
        { status: 404 }
      );
    }

    console.log("‚úÖ Comp√©tition trouv√©e:", competition.name);

    // V√©rifier le statut de la comp√©tition
    if (competition.status !== "OPEN") {
      let statusMessage =
        "Les inscriptions ne sont pas ouvertes pour cette comp√©tition";
      switch (competition.status) {
        case "DRAFT":
          statusMessage = "Cette comp√©tition est encore en pr√©paration";
          break;
        case "CLOSED":
          statusMessage =
            "Les inscriptions sont ferm√©es pour cette comp√©tition";
          break;
        case "IN_PROGRESS":
          statusMessage =
            "Cette comp√©tition est d√©j√† en cours, impossible de s'inscrire";
          break;
        case "COMPLETED":
          statusMessage = "Cette comp√©tition est termin√©e";
          break;
        case "CANCELLED":
          statusMessage = "Cette comp√©tition a √©t√© annul√©e";
          break;
      }
      return NextResponse.json({ error: statusMessage }, { status: 400 });
    }

    // V√©rifier la date limite d'inscription
    if (
      competition.registrationDeadline &&
      new Date(competition.registrationDeadline) < new Date()
    ) {
      return NextResponse.json(
        { error: "La date limite d'inscription est d√©pass√©e" },
        { status: 400 }
      );
    }

    // Compter les participants accept√©s pour v√©rifier la limite
    try {
      const acceptedParticipations = await db.participations.findByCompetition(
        competition._id.toString()
      );
      const acceptedCount =
        acceptedParticipations?.filter((p: any) => p.status === "APPROVED")
          .length || 0;

      if (
        competition.maxParticipants &&
        acceptedCount >= competition.maxParticipants
      ) {
        return NextResponse.json(
          { error: "Le nombre maximum de participants est atteint" },
          { status: 400 }
        );
      }
    } catch (countError) {
      console.error("‚ö†Ô∏è Erreur lors du comptage des participants:", countError);
      // Continue sans bloquer
    }

    // V√©rifier si l'utilisateur a d√©j√† une demande pour cette comp√©tition
    let existingParticipation = null;
    try {
      existingParticipation = await db.participations.findExisting(
        competition._id.toString(),
        session.user.id
      );
    } catch (existingError) {
      console.error(
        "‚ö†Ô∏è Erreur lors de la v√©rification des participations existantes:",
        existingError
      );
      // Continue sans bloquer
    }

    if (existingParticipation) {
      let statusMessage = "";
      switch (existingParticipation.status) {
        case "PENDING":
          statusMessage =
            "Vous avez d√©j√† une demande en attente pour cette comp√©tition";
          break;
        case "APPROVED":
          statusMessage = "Vous √™tes d√©j√† inscrit √† cette comp√©tition";
          break;
        case "REJECTED":
          statusMessage =
            "Votre demande pr√©c√©dente a √©t√© rejet√©e. Contactez l'organisateur pour plus d'informations";
          break;
        default:
          statusMessage = "Vous avez d√©j√† une demande pour cette comp√©tition";
      }
      return NextResponse.json({ error: statusMessage }, { status: 400 });
    }

    // Cr√©er la demande de participation avec types corrects
    let participation = null;
    try {
      const participationData = {
        competitionId: new ObjectId(competition._id.toString()),
        participantId: new ObjectId(session.user.id),
        status: "PENDING" as any,
        notes: message || "",
        applicationDate: new Date(),
      };

      participation = await db.participations.create(participationData);

      if (!participation) {
        throw new Error("√âchec de la cr√©ation de la participation");
      }

      console.log(
        "‚úÖ Demande de participation cr√©√©e:",
        participation._id?.toString()
      );
    } catch (createError) {
      console.error(
        "‚ùå Erreur lors de la cr√©ation de la participation:",
        createError
      );
      return NextResponse.json(
        { error: "Erreur lors de la cr√©ation de la demande" },
        { status: 500 }
      );
    }

    // Cr√©er une notification pour l'organisateur
    try {
      const participant = await db.users.findById(session.user.id);
      const participantName =
        `${participant?.firstName || ""} ${
          participant?.lastName || ""
        }`.trim() || "Participant";

      const notificationData = {
        userId: new ObjectId(competition.organizerId.toString()),
        type: "INFO" as any,
        category: "PARTICIPATION" as any,
        title: "Nouvelle demande de participation",
        message: `${participantName} souhaite participer √† votre comp√©tition "${competition.name}"`,
        link: `/organizer/participations/${participation._id?.toString()}`,
        data: JSON.stringify({
          competitionId: competition._id.toString(),
          participationId: participation._id?.toString(),
          participantId: session.user.id,
          competitionName: competition.name,
        }),
      };

      await db.notifications.create(notificationData);
      console.log("‚úÖ Notification envoy√©e √† l'organisateur");
    } catch (notificationError) {
      console.error(
        "‚ö†Ô∏è Erreur lors de l'envoi de la notification:",
        notificationError
      );
      // Continue sans bloquer - la participation est cr√©√©e
    }

    // R√©ponse enrichie avec toutes les informations
    return NextResponse.json({
      success: true,
      message: "Demande de participation envoy√©e avec succ√®s",
      data: {
        participationId: participation._id?.toString(),
        competitionId: competition._id.toString(),
        competitionName: competition.name,
        status: "PENDING",
        applicationDate: new Date().toISOString(),
        organizerName: competition.organizerName || "Organisateur",
        maxParticipants: competition.maxParticipants,
        registrationDeadline: competition.registrationDeadline,
      },
    });
  } catch (error) {
    console.error(
      "‚ùå Erreur globale lors de la demande de participation:",
      error
    );
    const errorMessage =
      error instanceof Error ? error.message : "Erreur inconnue";

    return NextResponse.json(
      {
        error: "Erreur lors de la demande de participation",
        details:
          process.env.NODE_ENV === "development" ? errorMessage : undefined,
      },
      { status: 500 }
    );
  }
}
