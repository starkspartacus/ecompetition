import { type NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { ObjectId } from "mongodb";
import { authOptions } from "@/lib/auth";
import { connectDB } from "@/lib/mongodb-client";

// GET: R√©cup√©rer une comp√©tition par ID ou code unique
export async function GET(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ message: "Non autoris√©" }, { status: 401 });
    }

    const { id } = context.params;

    console.log(`üîç Recherche de la comp√©tition avec ID/code: ${id}`);

    // √âtablir la connexion √† MongoDB
    const db = await connectDB();

    // V√©rifier si l'ID est un ObjectId valide
    let query = {};
    let isObjectId = false;
    try {
      // Essayer de convertir en ObjectId
      const objectId = new ObjectId(id);
      query = { _id: objectId };
      isObjectId = true;
      console.log(`‚úÖ ID valide comme ObjectId: ${id}`);
    } catch (error) {
      // Si ce n'est pas un ObjectId valide, chercher par uniqueCode
      query = { uniqueCode: id };
      console.log(
        `‚ÑπÔ∏è ID non valide comme ObjectId, recherche par uniqueCode: ${id}`
      );
    }

    // Rechercher dans la collection "Competition"
    let competition = await db.collection("Competition").findOne(query);

    // Si non trouv√© et que c'√©tait un ObjectId, essayer avec la collection "competitions" (minuscule)
    if (!competition && isObjectId) {
      console.log(
        `‚ÑπÔ∏è Comp√©tition non trouv√©e dans "Competition", essai dans "competitions"`
      );
      competition = await db.collection("competitions").findOne(query);
    }

    // Si non trouv√© et que c'√©tait un code unique, essayer avec la collection "competitions" (minuscule)
    if (!competition && !isObjectId) {
      console.log(
        `‚ÑπÔ∏è Comp√©tition non trouv√©e dans "Competition", essai dans "competitions"`
      );
      competition = await db.collection("competitions").findOne(query);
    }

    if (!competition) {
      console.log(`‚ùå Comp√©tition non trouv√©e avec ID/code: ${id}`);
      return NextResponse.json(
        { message: "Comp√©tition non trouv√©e" },
        { status: 404 }
      );
    }

    console.log(
      `‚úÖ Comp√©tition trouv√©e: ${
        competition.title || competition.name || "Sans titre"
      }`
    );

    return NextResponse.json(competition);
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la r√©cup√©ration de la comp√©tition:",
      error
    );
    return NextResponse.json(
      {
        message: `Erreur: ${
          error instanceof Error ? error.message : "Erreur inconnue"
        }`,
      },
      { status: 500 }
    );
  }
}

// PUT: Mettre √† jour une comp√©tition
export async function PUT(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ message: "Non autoris√©" }, { status: 401 });
    }

    const { id } = context.params;

    // √âtablir la connexion √† MongoDB
    const db = await connectDB();

    const data = await request.json();

    // V√©rifier si l'ID est un ObjectId valide
    let query = {};
    try {
      // Essayer de convertir en ObjectId
      const objectId = new ObjectId(id);
      query = { _id: objectId };
    } catch (error) {
      // Si ce n'est pas un ObjectId valide, chercher par uniqueCode
      query = { uniqueCode: id };
    }

    // R√©cup√©rer l'ID de l'utilisateur
    let userId = session.user.id;
    if (!userId && session.user.email) {
      // Si l'ID n'est pas dans la session, essayer de le r√©cup√©rer par email
      const user = await db
        .collection("User")
        .findOne({ email: session.user.email });
      if (user && user._id) {
        userId = user._id.toString();
      }
    }

    if (!userId) {
      return NextResponse.json(
        { message: "Impossible de d√©terminer l'ID de l'utilisateur" },
        { status: 400 }
      );
    }

    // V√©rifier si la comp√©tition existe et appartient √† l'organisateur
    const existingCompetition = await db.collection("Competition").findOne({
      ...query,
      organizerId: userId,
    });

    if (!existingCompetition) {
      // Essayer dans la collection "competitions" (minuscule)
      const altCompetition = await db.collection("competitions").findOne({
        ...query,
        organizerId: userId,
      });

      if (!altCompetition) {
        return NextResponse.json(
          {
            message:
              "Comp√©tition non trouv√©e ou vous n'√™tes pas autoris√© √† la modifier",
          },
          { status: 404 }
        );
      }
    }

    // D√©terminer la collection √† utiliser
    const collection = existingCompetition ? "Competition" : "competitions";

    // Pr√©parer les donn√©es √† mettre √† jour
    const updateData: any = {};

    // Si nous avons re√ßu un seul champ (comme status), ne mettre √† jour que ce champ
    if (Object.keys(data).length === 1 && data.status) {
      updateData.status = data.status;
    } else {
      // Sinon, mettre √† jour tous les champs fournis
      const allowedFields = [
        "title",
        "name",
        "description",
        "category",
        "country",
        "city",
        "commune",
        "address",
        "venue",
        "location",
        "startDate",
        "endDate",
        "registrationStartDate",
        "registrationEndDate",
        "registrationDeadline",
        "maxParticipants",
        "status",
        "isPublic",
        "rules",
        "imageUrl",
        "bannerUrl",
      ];

      allowedFields.forEach((field) => {
        if (data[field] !== undefined) {
          // Convertir les dates en objets Date
          if (
            [
              "startDate",
              "endDate",
              "registrationStartDate",
              "registrationEndDate",
              "registrationDeadline",
            ].includes(field) &&
            data[field]
          ) {
            updateData[field] = new Date(data[field]);
          } else {
            updateData[field] = data[field];
          }
        }
      });
    }

    // Ajouter la date de mise √† jour
    updateData.updatedAt = new Date();

    // Mettre √† jour la comp√©tition
    const result = await db
      .collection(collection)
      .updateOne(query, { $set: updateData });

    if (result.matchedCount === 0) {
      return NextResponse.json(
        { message: "Comp√©tition non trouv√©e" },
        { status: 404 }
      );
    }

    // R√©cup√©rer la comp√©tition mise √† jour
    const updatedCompetition = await db.collection(collection).findOne(query);

    return NextResponse.json({
      message: "Comp√©tition mise √† jour avec succ√®s",
      competition: updatedCompetition,
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour de la comp√©tition:", error);
    return NextResponse.json(
      {
        message: `Erreur: ${
          error instanceof Error ? error.message : "Erreur inconnue"
        }`,
      },
      { status: 500 }
    );
  }
}
